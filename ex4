Write a program using BISON.
Make file 
a.out: flex.o bison.tab.o
	gcc flex.o bison.tab.o -lm
lex.o: flex.l
	flex flex.l
	gcc -c lex.yy.c
bison.tab.o: bison.y
	bison bison.y
	sed -i 's/^YYSTYPE yylval;//g' bison.tab.c
	gcc -c bison.tab.c
clean:
	rm *.o *.c a.out

 bison.y
 %{
#include <math.h>
%}
%{void yyerror(char *ps, ...) {printf("%s\n", ps);}%}
%union {int d;}
%token <d> NUM
%token '(' ')'
%left '+'
%left '-'
%left '*'
%left '/'
%right '^'
%type <d> exp factor pow term
%start cal

%%
cal
: exp
{ printf("The result is %d\n", $1); }
;
exp
: exp '+' factor
{ $$ = $1 + $3; }
| exp '-' factor
{ $$ = $1 - $3; }
| factor
{ $$ = $1; }
;
factor
: factor '*' pow
{ $$ = $1 * $3; }
| factor '/' pow
{ $$ = $1 / $3; }
| pow
{ $$ = $1; }
;
pow
: term '^' pow
{ $$ = pow($1, $3); }
| term
{ $$ = $1; }
;
term
: NUM
{ $$ = $1; }
| '(' exp ')'
{ $$ = $2; }
;

%%
int main() {
	yyparse();
	return 0;
}

flex.l
%{
#include <stdio.h>
#define NUMBER 258
typedef union {
int d;
} YYSTYPE;
YYSTYPE yylval;
%}
%%
[ \t]+ {}
"(" { return '('; }
")" { return ')'; }
"+" { return '+'; }
"-" { return '-'; }
"*" { return '*'; }
"/" { return '/'; }
"^" { return '^'; }
[0-9]+ {
  yylval.d = atoi(yytext);
  return NUMBER;
}
%%
int yywrap() { return 1; }

 
